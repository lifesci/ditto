use std::str::FromStr;
use crate::ast::*;

grammar;

// START TOKENS

// Arithmetic
t_Add: &'input str = "+";
t_Sub: &'input str = "-";
t_Mul: &'input str = "*";
t_Div: &'input str = "/";
t_Mod: &'input str = "%";

// Logic
t_And: &'input str = "and";
t_Or: &'input str = "or";
t_Not: &'input str = "not";
t_Equal: &'input str = "==";
t_Gt: &'input str = ">";
t_Lt: &'input str = "<";
t_Gte: &'input str = ">=";
t_Lte: &'input str = "<=";

// Numeric literals
t_Int: i32 = r"0|[1-9][0-9]*" => i32::from_str(<>).unwrap();

// Identifiers
t_Id: String = r"[a-zA-Z][a-zA-Z0-9_]*" => <>.to_string();

// Keywords
t_Let: &'input str = "let";
t_If: &'input str = "if";
t_Else: &'input str = "else";
t_While: &'input str = "while";
t_Player: &'input str = "player";
t_Enemy: &'input str = "enemy";
t_Action: &'input str = "action";
t_Targets: &'input str = "targets";
t_Trigger: &'input str = "trigger";
t_On: &'input str = "on";
t_Statblock: &'input str = "statblock";
t_Stats: &'input str = "stats";
t_Item: &'input str = "item";
t_Door: &'input str = "door";
t_To: &'input str = "to";
t_Requires: &'input str = "requires";
t_Room: &'input str = "room";

// END TOKENS

// START GRAMMAR

CommaList<T>: Vec<T> = {
    <mut list: (<T> ",") *> <last: T?> => match last {
        Some(l) => {
            list.push(l);
            list
        },
        None => list,
    },
}

pub Ditto: DittoNode = {
    <game: Game>
    <statblock: Statblock>
    <player: Player>
    <enemies: Enemy*>
    <items: ItemTemplate*>
    <rooms: Room*>
    => DittoNode {<>},
}

Game: GameNode = {
    "game" <name: t_Id> ";" => GameNode {name: name},
}

Statblock: StatblockNode = {
    t_Statblock "{" <stats: StatList> "}" => StatblockNode {<>},
}

StatOverride: Vec<StatNode> = {
    <stats: (t_Stats "{" <StatList> "}")?> => match stats {
        Some(s) => s,
        None => Vec::new(),
    },
}

StatList: Vec<StatNode> = {
    <Stat*>,
}

Stat: StatNode = {
    <name: t_Id> "=" <val: Expr> ";" => StatNode {<>},
}

Player: EntityNode = {
    t_Player <name: t_Id> "{" <stats: StatOverride> <actions: Action*> <triggers: Trigger*> "}" => EntityNode {entity: EntityType::Player, <>},
}

Enemy: EntityNode = {
    t_Enemy <name: t_Id> "{" <stats: StatOverride> <actions: Action*> <triggers: Trigger*> "}" => EntityNode {entity: EntityType::Enemy, <>},
}

ItemTemplate: ItemTemplateNode = {
    t_Item <name: t_Id> "<" <attribs: CommaList<t_Id>> ">" "(" <args: CommaList<t_Id>> ")" "{" <actions: Action*> "}" => ItemTemplateNode {<>},
}

ItemInstance: ItemInstanceNode = {
    <name: t_Id> <attribs: ItemInstanceAttribList> "(" <args: CommaList<Expr>> ")" ";" => ItemInstanceNode {<>},
}

ItemInstanceAttribList: Vec<String> = {
    <attribs: ("<" <CommaList<t_Id>> ">")?> => match attribs {
        Some(a) => a,
        None => Vec::new(),
    },
}

Door: DoorNode = {
    t_Door <name: t_Id> t_To <to:t_Id> <reqs: DoorReqs> ";" => DoorNode {<>},
}

DoorReqs: Vec<String> = {
    <reqs: (t_Requires "(" <CommaList<t_Id>> ")")?> => match reqs {
        Some(r) => r,
        None => Vec::new(),
    },
}

Room: RoomNode = {
    t_Room <name: t_Id> "{" <items: ItemInstance*> <doors: Door*> "}" => RoomNode {<>},
}

IdList = { t_Id* }

Action: ActionNode = {
    t_Action <name: t_Id> t_Targets "(" <targets: Expr> ")" "{" <children: StmtList> "}" => ActionNode {<>},
}

Trigger: TriggerNode = {
    t_Trigger <name: t_Id> t_On "(" <actions: Expr> ")" "{" <children: StmtList> "}" => TriggerNode {<>},
}

Stmt: Box<StmtEnum> = {
    t_Let <l: t_Id> "=" <r: Expr> ";" => Box::new(StmtEnum::Declare(DeclareNode {<>})),
    <l: t_Id> "=" <r: Expr> ";" => Box::new(StmtEnum::Assign(AssignNode {l: Box::new(AssignEnum::Var(l)), r: r})),
    <l: Property> "=" <r: Expr> ";" => Box::new(StmtEnum::Assign(AssignNode {l: Box::new(AssignEnum::Prop(l)), r: r})),
    t_While "(" <cond: Expr> ")" "{" <children: StmtList> "}" => Box::new(StmtEnum::While(WhileNode {<>})),
    <main: If> <alt: (t_Else <If>)*> <fin: Else> => Box::new(StmtEnum::Cond(CondNode {<>})),
}

StmtList: Vec<Box<StmtEnum>> = {
    Stmt*,
}

If: IfNode = {
    t_If "(" <cond: Expr> ")" "{" <children: Stmt*> "}" => IfNode {<>},
}

Else: Vec<Box<StmtEnum>> = {
    <branch: (t_Else "{" <StmtList> "}")?> => match branch {
        None => Vec::new(),
        Some(b) => b,
    }
};

Property: PropertyNode = {
    <var:t_Id> "." <prop:t_Id> => PropertyNode {var: var, prop: prop},
};

Expr: Box<ExprEnum> = {
    <l:Expr> t_Add <r:Factor> => Box::new(ExprEnum::BinOp(BinOpNode {op: BinOp::Add, <>})),
    <l:Expr> t_Sub <r:Factor> => Box::new(ExprEnum::BinOp(BinOpNode {op: BinOp::Sub, <>})),
    <l:Expr> t_Or <r:Factor> => Box::new(ExprEnum::BinOp(BinOpNode {op: BinOp::Or, <>})),
    <l:Expr> t_Equal <r:Factor> => Box::new(ExprEnum::BinOp(BinOpNode {op: BinOp::Equal, <>})),
    <l:Expr> t_Gt <r:Factor> => Box::new(ExprEnum::BinOp(BinOpNode {op: BinOp::Gt, <>})),
    <l:Expr> t_Lt <r:Factor> => Box::new(ExprEnum::BinOp(BinOpNode {op: BinOp::Lt, <>})),
    <l:Expr> t_Gte <r:Factor> => Box::new(ExprEnum::BinOp(BinOpNode {op: BinOp::Gte, <>})),
    <l:Expr> t_Lte <r:Factor> => Box::new(ExprEnum::BinOp(BinOpNode {op: BinOp::Lte, <>})),
    Factor,
}

Factor: Box<ExprEnum> = {
    <l:Factor> t_Mul <r:Unary> => Box::new(ExprEnum::BinOp(BinOpNode {op: BinOp::Mul, <>})),
    <l:Factor> t_Div <r:Unary> => Box::new(ExprEnum::BinOp(BinOpNode {op: BinOp::Div, <>})),
    <l:Factor> t_Mod <r:Unary> => Box::new(ExprEnum::BinOp(BinOpNode {op: BinOp::Mod, <>})),
    <l:Factor> t_And <r:Unary> => Box::new(ExprEnum::BinOp(BinOpNode {op: BinOp::And, <>})),
    <Unary>,
}

Unary: Box<ExprEnum> = {
    t_Sub <l:Term> => Box::new(ExprEnum::UnaryOp(UnaryOpNode {op:UnaryOp::Neg, <>})),
    t_Not <l:Term> => Box::new(ExprEnum::UnaryOp(UnaryOpNode {op:UnaryOp::Not, <>})),
    Term,
}

Term: Box<ExprEnum> = {
    "(" <Expr> ")",
    t_Int => Box::new(ExprEnum::Int(<>)),
    t_Id => Box::new(ExprEnum::Var(<>)),
    Property => Box::new(ExprEnum::Prop(<>)),
}

// END GRAMMAR
